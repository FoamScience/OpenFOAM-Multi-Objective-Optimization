/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2012                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
FoamFile
{
    version         2;
    format          ascii;
    class           dictionary;
    object          dynamicMeshDict;
}

dynamicFvMesh   adaptiveFvMesh;

refiner         polyRefiner;

errorEstimator  coded;

name            emulateDelta;

code            #{
    Info<< "---->! custom error estimator !<----" << endl;
    error_ = 0.0;
    /*
        End result must be (error_ is a volScalarField):
        - error_ == 1  if the cell needs to be refined
        - error_ == 0  if the cell is to be left alone
        - error_ == -1 if the vertices of the cell are to be unrefined
    */

    const auto& alpha = mesh_.lookupObject<volScalarField>("alpha.water");
    const auto& owner = mesh_.owner();
    const auto& neighbour = mesh_.neighbour();
    const label nInternalFaces = mesh_.nInternalFaces();
    // Loop through interal faces and store difference between owner and neighbour
    for (label facei = 0; facei < nInternalFaces; facei++)
    {
        label own = owner[facei];
        label nei = neighbour[facei];

        scalar eT = mag(alpha[own] - alpha[nei]);

        error_[own] = max(error_[own], eT);
        error_[nei] = max(error_[nei], eT);
    }

    // Settings for "refining everything where delta > 0.1, unrefine otherwise"
    lowerRefine_ = 0.01;
    upperRefine_ =  GREAT;
    lowerUnrefine_ = lowerRefine_;
    upperUnrefine_ =  GREAT;
    // This converts error_ to the right values (-1, 0, 1) based on the
    // settings lowerRefine_ ... etc
    if (scale) normalize(error_);
    // error_.correctBoundaryConditions() is called after this code in case you
    // need to manipulate boundary values
    Info<< "---->! end    error estimator !<----" << endl;
#};

balance         yes;

allowableImbalance 0.1;

refineInterval  50;

unrefineInterval 250;

maxRefinement   1;

nBufferLayers   3;

nRefinementBufferLayers 3;

nUnrefinementBufferLayers 6;

lowerRefineLevel 0.01;

upperRefineLevel 0.99;

unrefineLevel   0.01;

upperUnrefineLevel 0.99;

dumpLevel       yes;

refineProbes    no;


// ************************************************************************* //
